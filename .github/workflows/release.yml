name: Release
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PACKAGE_JSON_PATH: package.json
  GITHUB_BOT_NAME: github-actions[bot]
  GITHUB_BOT_EMAIL: github-actions[bot]@users.noreply.github.com

defaults:
  run:
    shell: pwsh

jobs:
  paths-filter:
    name: Paths Filter
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      package_json: ${{ steps.filter.outputs.package_json }}
    steps:
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: filter
        with:
          filters: |
            package_json:
              - ${{ env.PACKAGE_JSON_PATH }}

  update-draft:
    name: Update Draft
    if:
      ${{ (github.event_name == 'pull_request' &&
      github.event.pull_request.base.ref == 'main') || github.event_name ==
      'workflow_dispatch'}}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      tag_name: ${{ steps.release-drafter.outputs.tag_name }}
    steps:
      - uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5
        id: release-drafter
        with:
          commitish: main

  update-files:
    name: Update Files
    needs: update-draft
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: true
    env:
      VERSION: ${{ needs.update-draft.outputs.tag_name }}
      SOURCE_BRANCH: github-actions/update-files/${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4
      - name: Update package.json
        run: |
          $jsonContent = Get-Content -Path $env:PACKAGE_JSON_PATH -Raw
          $updatedJson = $jsonContent | jq --arg version $env:VERSION '.version = $version'
          $updatedJson | jq '.' | Set-Content -Path $env:PACKAGE_JSON_PATH
      - name: Commit package.json
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5
        id: commit-package-json
        with:
          author_name: ${{ env.GITHUB_BOT_NAME }}
          author_email: ${{ env.GITHUB_BOT_EMAIL }}
          message: 'Update package.json'
          add: ${{ env.PACKAGE_JSON_PATH }}
          new_branch: ${{ env.SOURCE_BRANCH }}
      - name: Update README.md
        run: |
          Copy-Item -Path ".github/DRAFT_README.md" -Destination "README.md" -Force
      - name: Commit README.md
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5
        id: commit-readme
        with:
          author_name: ${{ env.GITHUB_BOT_NAME }}
          author_email: ${{ env.GITHUB_BOT_EMAIL }}
          message: 'Update README.md'
          add: 'README.md'
          new_branch: ${{ env.SOURCE_BRANCH }}
      - uses: actions/create-github-app-token@v2
        id: create-github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Create pull request and merge
        if:
          ${{ steps.commit-package-json.outputs.committed == 'true' ||
          steps.commit-readme.outputs.committed == 'true'}}
        env:
          GH_TOKEN: ${{ steps.create-github-app-token.outputs.token }}
        run: |
          gh pr create --title "Update files for release" --body "Update files for release" --base main --head $env:SOURCE_BRANCH
          gh pr merge $env:SOURCE_BRANCH --auto --merge

  release:
    name: Release
    needs: [update-draft, paths-filter]
    environment: Release
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    if:
      ${{ github.event_name == 'pull_request' &&
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.merged &&
      needs.paths-filter.outputs.package_json == 'true' }}
    env:
      VERSION: ${{ needs.update-draft.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - name: Validate version in package.json
        run: |
          $packageVersion = jq -r '.version' $env:PACKAGE_JSON_PATH
          if ($packageVersion -ne $env:VERSION) {
            Write-Host "::error::version in package.json ($packageVersion) does not match the release draft tag ($env:VERSION)"
            exit 1
          }
      - uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5
        id: release-drafter
        with:
          publish: true
          commitish: main
      - name: Get semver
        id: get-semver
        run: |
          if ($env:VERSION -match '^(\d+)\.(\d+)\.(\d+)') {
            $major = $matches[1]
            $minor = $matches[2]
            $patch = $matches[3]
            "major=$major" | Add-Content -Path $env:GITHUB_OUTPUT
            "minor=$major.$minor" | Add-Content -Path $env:GITHUB_OUTPUT
            "patch=$major.$minor.$patch" | Add-Content -Path $env:GITHUB_OUTPUT
          } else {
            Write-Host "::error::Unable to parse version: $env:VERSION"
            exit 1
          }
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
      - name: Update major tag
        if: steps.get-semver.outputs.major != '0'
        run: |
          git push -f origin "refs/tags/$env:VERSION`:refs/tags/${{ steps.get-semver.outputs.major }}"
      - name: Update minor tag
        if: steps.get-semver.outputs.minor != '0.0'
        run: |
          git push -f origin "refs/tags/$env:VERSION`:refs/tags/${{ steps.get-semver.outputs.minor }}"
